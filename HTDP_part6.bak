;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname HTDP_part6) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require 2htdp/batch-io)
(require 2htdp/image)
(require 2htdp/universe)
(require 2htdp/abstraction)
(require htdp/dir)
;489
(define (add-to-each n l)
  (map (lambda (x) (+ x n)) l))
(define (add-to-each.original n l)
  (cond
    [(empty? l) '()]
    [else (cons (+ (first l) n) (add-to-each.original n (rest l)))]))
;490
; [List-of Number] -> [List-of Number]
; converts a list of relative to absolute distances
; the first number represents the distance to the origin
 
(check-expect (relative->absolute '(50 40 70 30 30))
              '(50 90 160 190 220))
 
(define (relative->absolute l)
  (cond
    [(empty? l) '()]
    [else (local ((define rest-of-l
                    (relative->absolute (rest l)))
                  (define adjusted
                    (add-to-each (first l) rest-of-l)))
            (cons (first l) adjusted))]))
;i'd guess this is roughly n(n-1) order of magnitude
;491
;append might not be ideal here in terms of perf, but it's pretty close without having to do a local expression
(define (my-reverse l)
  (cond
    [(empty? (rest l)) (list (first l))]
    [else (append (my-reverse (rest l)) (list (first l)))]))
;493
;the base function loops over the list, and it calls an auxiliary function which also loops over the list. hence n^2 runtime
;494
;i dont think an accumulator would help here since it'd have to loop through the list n^2 times no matter what unless the algorithm was changed to merge sort